{"version":3,"sources":["components/templates/loadingAnimation/index.js","components/atoms/title/index.js","components/molecules/card/index.js","components/atoms/button/index.js","components/molecules/pagination/index.js","components/atoms/listItem/index.js","App.js","reportWebVitals.js","index.js"],"names":["App","children","useState","loading","setLoading","useEffect","setTimeout","className","Title","props","classnames","styles","title","defaultProps","Card","card","uniqueId","CardHeader","CardBody","Button","type","onClick","theme","size","disabled","classProps","button","index","totalPeople","page","data","setPage","peoplePerPage","old","Math","max","ceil","ListItem","queryClient","QueryClient","QueryClientProvider","client","Content","useQuery","fetch","then","res","json","isLoading","error","message","width","src","alt","results","length","count","map","person","name","url","match","mass","height","hair_color","skin_color","eye_color","birth_year","gender","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddedaf5f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './style.css';\n\nexport default function App({ children }) {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (loading) {\n      setTimeout(() => {\n        setLoading(false);\n      }, 200000);\n    }\n  }, [loading]);\n\n  if (!loading)\n    return (\n      <div className=\"loader\">\n        <div className=\"inner one\"></div>\n        <div className=\"inner two\"></div>\n        <div className=\"inner three\"></div>\n      </div>\n    );\n}\n","/* @flow */\nimport * as React from \"react\";\nimport classnames from \"classnames\";\n\nimport styles from \"./style.css\";\n\ntype Props = {\n    children?: React.Node,\n    className?: string,\n};\n\nconst Title = (props: Props): React.Element<*> => (\n    <h2 className={classnames(styles.title, props.className)}>\n        {props.children}\n    </h2>\n);\n\nTitle.defaultProps = {\n    className: \"\",\n    children: \"\",\n};\n\nexport default Title;\n","/* @flow */\nimport React from 'react';\nimport classnames from 'classnames';\n\nimport Title from '../../atoms/title';\n// import Button from '../../atoms/button';\n\nimport styles from './style.css';\n\ntype Props = {\n  children?: React.Node,\n  className?: string,\n  title: string,\n  // button?: string,\n  uniqueId: number,\n  page: number,\n};\n\nconst Card = (props: Props): React.Element<*> => (\n  <div className={classnames(styles.card, props.className)}>\n    <div className=\"card-inner\">\n      <p className=\"text-left\">#{props.uniqueId}</p>\n      <Title>{props.title}</Title>\n      {props.children}\n      {/* {props.button !== '' && <Button>{props.button}</Button>} */}\n    </div>\n  </div>\n);\n\nCard.defaultProps = {\n  className: '',\n  CardHeader: '',\n  CardBody: '',\n  title: '',\n  //   button: '',\n};\n\nexport default Card;\n\n// <div className=\"card\">\n//     <div className=\"card-inner\">\n//         <div className=\"card-title\">\n//             <h2>{person.name}</h2>\n//             {/* <span title=\"uniqueId\">#{createDisplayID(person)}</span> */}\n//         </div>\n//         <div className=\"card-body\">\n//             <p>Height: {person.height}</p>\n//             <p>Mass: {person.mass}</p>\n//             <p>Hair Color: {person.hair_color}</p>\n//             <p>Skin Color: {person.skin_color}</p>\n//             <p>Eye Color: {person.eye_color}</p>\n//             <p>Birth Year: {person.birth_year}</p>\n//             <p>Gender: {person.gender}</p>\n//         </div>\n//     </div>\n// </div>\n","import React from \"react\";\nimport classnames from \"classnames\";\n\nimport styles from \"./style.css\";\n\nexport const ButtonType = {\n    BUTTON: \"button\",\n    RESET: \"reset\",\n    SUBMIT: \"submit\",\n};\n\nexport const ButtonTheme = {\n    DEFAULT: \"default\",\n    ROUNDED: \"rounded\",\n};\n\nexport const ButtonSize = {\n    SMALL: \"small\",\n    MEDIUM: \"medium\",\n    LARGE: \"large\",\n};\n\ntype Props = {\n    type: string,\n    theme: string,\n    size: string,\n    onClick: Function,\n    children: React.Node,\n    className: string,\n    disabled: boolean,\n};\n\nconst Button = (props: Props): React.Element<*> => {\n    const { type, onClick, children, theme, size, className, disabled } = props;\n    const classProps: string = classnames(\n        styles.button,\n        styles[theme],\n        styles[size],\n        {\n            [styles.disabled]: disabled,\n        },\n        className\n    );\n\n    return (\n        <button\n            type={type}\n            onClick={onClick}\n            disabled={disabled}\n            className={classProps}\n        >\n            {children}\n        </button>\n    );\n};\n\nButton.defaultProps = {\n    type: ButtonType.BUTTON,\n    theme: ButtonTheme.DEFAULT,\n    size: ButtonSize.SMALL,\n    onClick: () => {},\n    className: \"\",\n    disabled: false,\n};\n\nexport default Button;\n","import React from 'react';\n\nimport Button from '../../atoms/button';\n\nimport './style.css';\n\nconst index = ({ totalPeople, data, page, setPage, peoplePerPage }) => {\n  return (\n    <div className=\"pagination\">\n      <Button onClick={() => setPage((old) => Math.max(old - 1, 1))} disabled={page === 1}>\n        Previous\n      </Button>\n      <span>\n        Page:\n        {page} / {Math.ceil(totalPeople / peoplePerPage)}\n      </span>\n      <Button onClick={() => setPage(page + 1)} disabled={page >= totalPeople / peoplePerPage}>\n        Next\n      </Button>\n    </div>\n  );\n};\n\nexport default index;\n","/* @flow */\nimport * as React from \"react\";\nimport classnames from \"classnames\";\n\nimport styles from \"./style.css\";\n\ntype Props = {\n    children?: React.Node,\n    className?: string,\n};\n\nconst ListItem = (props: Props): React.Element<*> => (\n    <li className={classnames(styles.title, props.className)}>\n        {props.children}\n    </li>\n);\n\nListItem.defaultProps = {\n    className: \"\",\n    children: \"\",\n};\n\nexport default ListItem;\n","import { QueryClient, QueryClientProvider, useQuery } from 'react-query';\nimport React, { useState } from 'react';\n\nimport LoadingAnimation from './components/templates/loadingAnimation';\nimport Card from './components/molecules/card';\nimport Pagination from './components/molecules/pagination';\nimport ListItem from './components/atoms/listItem';\nimport './components/templates/default/styles.css';\n\nimport './bootstrap';\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Content />\n    </QueryClientProvider>\n  );\n}\n\nfunction Content() {\n  const [page, setPage] = useState(1);\n  const { isLoading, error, data } = useQuery(['people', page], () =>\n    fetch(`https://swapi.dev/api/people/?page=${page}`).then((res) => res.json())\n  );\n\n  if (isLoading) return <LoadingAnimation></LoadingAnimation>;\n\n  if (error) return 'An error has occurred: ' + error.message;\n  return (\n    <div className=\"default\">\n      <div className=\"colFull\">\n        <img\n          width=\"320\"\n          className=\"center py-3\"\n          src=\"http://vignette1.wikia.nocookie.net/disney/images/8/8b/Starwars-logo.png\"\n          alt=\"Star Wars Logo\"\n        />\n        <Pagination\n          peoplePerPage={data.results.length}\n          totalPeople={data.count}\n          page={page}\n          setPage={setPage}\n        />\n        <div className=\"cardGrid\">\n          {data.results.map((person, index) => (\n            <Card\n              className=\"card\"\n              // button=\"Learn More\"\n              title={person.name}\n              key={person.name}\n              uniqueId={person.url.match(/\\d/g)}\n              page={page}\n            >\n              <ul>\n                <ListItem>Mass: {person.mass}</ListItem>\n                <ListItem>Height: {person.height}</ListItem>\n                <ListItem>Hair Color: {person.hair_color}</ListItem>\n                <ListItem>Skin Color: {person.skin_color}</ListItem>\n                <ListItem>Eye Color: {person.eye_color}</ListItem>\n                <ListItem>Birth Year: {person.birth_year}</ListItem>\n                <ListItem>Gender: {person.gender}</ListItem>\n              </ul>\n            </Card>\n          ))}\n        </div>\n      </div>\n      {/* data={data} */}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}